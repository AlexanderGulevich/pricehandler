package basisFx.domain.price;

import basisFx.appCore.activeRecord.ActiveRecord;
import basisFx.appCore.activeRecord.BoolComboBox;
import basisFx.appCore.utils.Registry;
import basisFx.dataSource.Db;
import javafx.beans.property.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

public class PriceItem extends ActiveRecord {
    private static PriceItem INSTANCE = new PriceItem();
//
//    String priceItem = "CREATE   TABLE IF NOT EXISTS PriceItem ( "
//            + "	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  "
//            + "	storedCategoryId INTEGER,  "
//            + "	imgId INTEGER,  "
//            + "	name  VARCHAR(200),  "
//            + "	alias  VARCHAR(200),  "
//            + "	barcode  VARCHAR(15),  "
//            + "	orderNumber  VARCHAR(15),  "
//            + "	pure_order  VARCHAR(15),  "
//            + "	visibitity Boolean,  "
//            + " FOREIGN KEY (storedCategoryId) REFERENCES StoredCategory(id) on delete cascade , "
//            + " FOREIGN KEY (imgId) REFERENCES IMG(id) on delete cascade  "
//            + ")";


    private SimpleObjectProperty<String> name =new SimpleObjectProperty<>(this, "name", null);
    private SimpleObjectProperty<String> barcode =new SimpleObjectProperty<>(this, "barcode", null);
    private SimpleObjectProperty<String> alias =new SimpleObjectProperty<>(this, "alias", null);
    private SimpleObjectProperty<String> orderNumber =new SimpleObjectProperty<>(this, "orderNumber", null);
    private SimpleObjectProperty<String> pure_order =new SimpleObjectProperty<>(this, "pure_order", null);
    private SimpleObjectProperty<String> measure =new SimpleObjectProperty<>(this, "measure", null);
    private SimpleObjectProperty<String> amountInBox =new SimpleObjectProperty<>(this, "amountInBox", null);
    private SimpleObjectProperty<StoredCategory> storedCategory = new SimpleObjectProperty<>(this, "storedCategory",  null );
    private SimpleObjectProperty<Double> amountInPrice =new SimpleObjectProperty<>(this, "amountInPrice", null);
    private SimpleObjectProperty<Double> pricePerUnit =new SimpleObjectProperty<>(this, "pricePerUnit", null);
    private SimpleObjectProperty<BoolComboBox> isInArchiv =new SimpleObjectProperty<>(this, "isInArchiv", null);
    private SimpleObjectProperty<BoolComboBox> visibitity =new SimpleObjectProperty<>(this, "visibitity", null);
    private SimpleObjectProperty<LocalDate> dateOfPrice =new SimpleObjectProperty<>(this, "dateOfPrice", null);
    private SimpleObjectProperty<Img> img =new SimpleObjectProperty<>(this, "img", null);

    public static PriceItem getINSTANCE() {
        return INSTANCE;
    }
    @Override
    public String toString() {
        return null;
    }

    public String getPure_order() {
        return pure_order.get();
    }

    public SimpleObjectProperty<String> pure_orderProperty() {
        return pure_order;
    }

    public void setPure_order(String pure_order) {
        this.pure_order.set(pure_order);
    }

    @Override
    public ObservableList<ActiveRecord> getAll() {
        ObservableList<ActiveRecord> allRecords= FXCollections.observableArrayList();
        Price price = (Price) Registry.dataExchanger.get("price");
        if (price != null) {
            return price.getAllRecords();
        }
        Registry.windowFabric.infoWindow("Чтобы отобразить данные сначала загрузите прайс!");
        return allRecords;
    }

    public StoredCategory getStoredCategory() {
        return storedCategory.get();
    }

    public SimpleObjectProperty<StoredCategory> storedCategoryProperty() {
        return storedCategory;
    }

    public void setStoredCategory(StoredCategory storedCategory) {
        this.storedCategory.set(storedCategory);
    }

    public BoolComboBox getVisibitity() {
        return visibitity.get();
    }

    public SimpleObjectProperty<BoolComboBox> visibitityProperty() {
        return visibitity;
    }

    public void setVisibitity(BoolComboBox visibitity) {
        this.visibitity.set(visibitity);
    }

    public Img getImg() {
        return img.get();
    }

    public SimpleObjectProperty<Img> imgProperty() {
        return img;
    }

    public void setImg(Img img) {
        this.img.set(img);
    }

    public String getName() {
        return name.get();
    }

    public SimpleObjectProperty<String> nameProperty() {
        return name;
    }

    public void setName(String name) {
        this.name.set(name);
    }

    public String getBarcode() {
        return barcode.get();
    }

    public SimpleObjectProperty<String> barcodeProperty() {
        return barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode.set(barcode);
    }

    public String getAlias() {
        return alias.get();
    }

    public SimpleObjectProperty<String> aliasProperty() {
        return alias;
    }

    public void setAlias(String alias) {
        this.alias.set(alias);
    }

    public String getOrderNumber() {
        return orderNumber.get();
    }

    public SimpleObjectProperty<String> orderNumberProperty() {
        return orderNumber;
    }

    public void setOrderNumber(String orderNumber) {
        this.orderNumber.set(orderNumber);
    }

    public String getMeasure() {
        return measure.get();
    }

    public SimpleObjectProperty<String> measureProperty() {
        return measure;
    }

    public void setMeasure(String measure) {
        this.measure.set(measure);
    }

    public String getAmountInBox() {
        return amountInBox.get();
    }

    public SimpleObjectProperty<String> amountInBoxProperty() {
        return amountInBox;
    }

    public void setAmountInBox(String amountInBox) {
        this.amountInBox.set(amountInBox);
    }

    public Double getAmountInPrice() {
        return amountInPrice.get();
    }

    public SimpleObjectProperty<Double> amountInPriceProperty() {
        return amountInPrice;
    }

    public void setAmountInPrice(Double amountInPrice) {
        this.amountInPrice.set(amountInPrice);
    }

    public Double getPricePerUnit() {
        return pricePerUnit.get();
    }

    public SimpleObjectProperty<Double> pricePerUnitProperty() {
        return pricePerUnit;
    }

    public void setPricePerUnit(Double pricePerUnit) {
        this.pricePerUnit.set(pricePerUnit);
    }

    public BoolComboBox getIsInArchiv() {
        return isInArchiv.get();
    }

    public SimpleObjectProperty<BoolComboBox> isInArchivProperty() {
        return isInArchiv;
    }

    public void setIsInArchiv(BoolComboBox isInArchiv) {
        this.isInArchiv.set(isInArchiv);
    }

    public LocalDate getDateOfPrice() {
        return dateOfPrice.get();
    }

    public SimpleObjectProperty<LocalDate> dateOfPriceProperty() {
        return dateOfPrice;
    }

    public void setDateOfPrice(LocalDate dateOfPrice) {
        this.dateOfPrice.set(dateOfPrice);
    }







    public StoredCategory findStoredCategory() {
        List<ActiveRecord> collect = PriceItem.getINSTANCE().getAll().stream().filter(record -> {
            PriceItem priceItem = (PriceItem) record;
            String barcode = priceItem.getBarcode();
            String pure_order = priceItem.getPure_order();
            if (getBarcode().equals(barcode) && getPure_order().equals(pure_order)) {
                return true;
            }
            return false;
        }).collect(Collectors.toList());

        int length = collect.toArray().length;
        if (length > 1) {
            Registry.windowFabric
                    .infoWindow(
                            "Что-то пошло не так: в бд есть две или более записи " +
                                    "с одним и тем же штрихкодом и номером заказа\n" +
                                    "штрихкод-" + getBarcode() +
                                    "\n заказ-" + getOrderNumber()
                    );
        }
        if (length == 1) {
            PriceItem priceItem = (PriceItem) collect.get(0);
            return priceItem.getStoredCategory();
        }

        return null;

    }



    public String findAlias() {
        List<ActiveRecord> collect = PriceItem.getINSTANCE().getAll().stream().filter(record -> {
            PriceItem priceItem = (PriceItem) record;
            String barcode = priceItem.getBarcode();
            String pure_order = priceItem.getPure_order();
            if (getBarcode().equals(barcode) && getPure_order().equals(pure_order)) {
                return true;
            }
            return false;
        }).collect(Collectors.toList());

        int length = collect.toArray().length;
        if (length > 1) {
            Registry.windowFabric
                    .infoWindow(
                            "Что-то пошло не так: в бд есть две или более записи " +
                                    "с одним и тем же штрихкодом и номером заказа\n" +
                                    "штрихкод-" + getBarcode() +
                                    "\n заказ-" + getOrderNumber()
                    );
        }
        if (length == 1) {
            PriceItem priceItem = (PriceItem) collect.get(0);
            return priceItem.getAlias();
        }

        return null;

    }






}
