plugins {
    id 'com.gradle.build-scan' version '1.11'
    id 'java'
    id 'edu.sc.seis.launch4j' version '2.4.4'
    id "com.jfrog.bintray" version "1.7"
    id 'net.ltgt.apt' version '0.10'
    id 'build-dashboard'
    id 'jacoco'
    id 'distribution'
}
//JDK SETTINGS
targetCompatibility = '1.8'
sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//GRADLE
task wrapper(type: Wrapper) { gradleVersion = '4.3.1' }

ext {
    author = "Alexander Gulevich"
    mainClassName = 'basisFx.appCore.EntryPoint'
    mainDir=rootProject.projectDir.toString().replace("\\", "/")
    version = '8x'
    description = 'An app build'
    testResultsDirName="my_testResults"
    testReportDirName="my_testReport"
    distsDirName="distribution"
    docsDirName="my_docs"
}

//SOURCE 
sourceSets { main { java { srcDirs  'src/sourcecode' } } }
sourceSets { res { resources { srcDirs  'src/res' } }}
sourceSets{ test{ java{ srcDirs "src/tests" }}}
//sourceSets{ test{ resources{srcDirs "src/res"}}}

//PLUGIN SETTINGS 
jacocoTestReport.enabled=true
assemble.enabled = true
distTar.enabled = false
distZip.enabled = true


//DEPENDENCIES
repositories {
    mavenCentral() 
    jcenter()
}
dependencies {
//    runtime files('libs/a.jar', 'libs/b.jar')
//    runtime fileTree(dir: 'res')
//    compile files('scenicView.jar');
    
//    implementation 'com.google.code.gson:gson:2.8.5'
    
    //TEST
//    testCompile group: 'junit', name: 'junit', version: '4.12'
//    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
//    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.0-M4")
//    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.0-M4")
//    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0-M4")
//    testCompile("org.junit.platform:junit-platform-runner:1.0.0-M4")

    //LOGGING
//    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.11.0'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'

    //BOILERPlATE
    compileOnly 'org.projectlombok:lombok:1.18.4'
    apt 'org.projectlombok:lombok:1.18.4'

    //DATABASE
    compile group : 'org.hsqldb', name: 'hsqldb', version: '2.4.0'
    compile group: 'xerces', name: 'xercesImpl', version: '2.11.0'

    //CONTROLS AND VIEW
    compile 'com.jfoenix:jfoenix:8.0.8'
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.14'
    compile group: 'xerces', name: 'xercesImpl', version: '2.11.0'
    compile group: 'de.jensd', name: 'fontawesomefx', version: '8.9'

    //REPORTS
//    compile group: 'net.sf.jasperreports', name: 'jasperreports', version: '6.7.0'

//    //POI
//    compile group: 'org.apache.poi', name: 'poi', version: '3.16'
//    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.16'
//    compile group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '3.16'
//    compile group: 'org.apache.poi', name: 'poi-scratchpad', version: '3.16'
    //POI
    compile group: 'org.apache.poi', name: 'poi', version: '4.1.0'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.0'
    compile group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '4.1.0'
    compile group: 'org.apache.poi', name: 'poi-scratchpad', version: '4.1.0'

    //REPORTS
//    compile 'com.google.guava:guava:27.0-jre'

    //GOOGLE
//    compile 'com.google.code.gson:gson:2.8.2'
//    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
//    compile group: 'com.google.http-client', name: 'google-http-client', version: '1.23.0'

    //HIBERNATE
//    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.12.Final'
//    compile group: 'org.hibernate', name: 'hibernate-jpamodelgen', version: '5.2.12.Final'

}

//test {
//    jacoco {
//        append = false
//        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
//        classDumpDir = file("$buildDir/jacoco/classpathdumps")
//    }
//}

distributions { custom {} }
//buildScan {
//    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
//    licenseAgree = 'yes'
//    publishAlways()
//}
jacoco {
    
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jar()   {
    baseName = 'PriceHandler'
    version =  '0.1'
    manifest {
        attributes(
                "Class-Path":
                        configurations.compile.collect {  "lib/" + it.getName() }.join(" "),
                'Main-Class': mainClassName,
                'Manifest-Version': 1.0
        )
    }
}
distributions {
    main {
        contents {
            baseName = 'PriceHandler'
            from jar
            into('lib') {
                from(project.configurations.runtime)
            }
            into('src/res') {
                from { sourceSets.res.resources }
            }
        }
    }
}

jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)

    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
    executionData = files('build/jacoco/test.exec')
}


//task copyLib(type: Copy) {
//    into 'build/output/lib'
//    from configurations.compile
//}

task info(type: GradleBuild) {
    buildFile = 'reflect.gradle'
    tasks = ['info']
}

task runApp(type: JavaExec) {
   classpath = sourceSets.main.runtimeClasspath
   main = 'basisFx.appCore.EntryPoint'
 }

launch4j {
    mainClassName = 'basisFx.appCore.EntryPoint'
    icon = mainDir+"/src/res/res/icon/panelIcon.ico"
}

////////////////////////////////////////////////////////////////////////////////

//TASK DEPENDENCIES
assemble.dependsOn createAllExecutables
distZip.shouldRunAfter(build)
runApp.shouldRunAfter(build)
runApp.mustRunAfter(build)
runApp.dependsOn(build)
jacocoTestReport.dependsOn build
test.finalizedBy(project.tasks.jacocoTestReport)